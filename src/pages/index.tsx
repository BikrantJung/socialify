import Main from "@/packages/components/sections/main/Main";
import RightBar from "@/packages/components/sections/rightbar/RightBar";
import { useFetchPosts } from "@/packages/hooks/useFetchPosts";
import SidebarLayout from "@/packages/layouts/SidebarLayout";
import { IUserProfile } from "@/packages/types/auth/profile.types";
import { IPost } from "@/packages/types/posts/post.types";
import { supabaseAuthClient } from "@/supabase/client";
import { useUserStore } from "@/zustand/useUserStore";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { useEffect } from "react";
interface HomeProps {
  profileData: IUserProfile;
}
export default function Home(props: HomeProps) {
  const { data, isLoading } = useFetchPosts();
  // useEffect(() => {
  //   useUserStore.getState().setUser(props.profileData);
  // }, [props.profileData]);
  // useUserStore.setState({
  //   user: props.profileData,
  // });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SidebarLayout>
        <div className="col-start-4 col-end-9 flex flex-col gap-4  pt-2">
          <Main posts={data} />
        </div>
        <div className="col-start-10 col-end-12 bg-blue-400">
          <RightBar />
        </div>
      </SidebarLayout>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  // Create authenticated Supabase Client

  const supabase = supabaseAuthClient(ctx);
  // Check if we have a session
  const {
    data: { session },
  } = await supabase.auth.getSession();

  if (!session)
    return {
      redirect: {
        destination: "/register",
        permanent: false,
      },
    };
  const { data: profileData, error } = await supabase
    .from("profiles")
    .select()
    .eq("id", session.user.id)
    .single();
  useUserStore.setState({
    user: profileData as IUserProfile,
  });
  return {
    props: {
      profileData: useUserStore.getState().user,
    },
  };
};
